To install Tailwind,

- Create React App
- Configured Tailwind
- Header
- Login Form
- Sign Up Form
- Form Validation
- useRef Hook
- Firebase Setup
- Deploying our app to production
- Create Signup User in Firebase.
- Implement sign in user api
- Create redux with userSlice
- Implemented Sign Out
- Update Profile
- Bugfix  : Signup user displayName and profile picture Update
- Bugfix : IF user is not logged in redirect /browse to login page and vice versa.
- Unsubscribed to the onAuthStateChanged callback.
- Add Hardcoded values to the constants files.
- Register for tmdb and create an app and get access token
- Get Data from tmdb now playing movie list api.
- Custom hook for now playing MovieList
- create movieSlice
- Update store with movies Data
- Planning for MainContainers And Secondary MainContainer
- Update store with trailer video data
- Embedded the youtube video and make it autoplay and mute
- Tailwind classes to make, maincontainer look awesome.








# Features
- Login/Sign up
    - Login/Signup for Form
    - Rediect to browser page 
- Browse (after authentication)
    - Header    
    - Main Movie
        - Trailer in Background
        - Title & Description
        - Movie Suggestion
            - MovieList * N

- Netflix GPT
    - Search Bar
    - Movie Suggestions







======================LOGIN.JS======================

There are two ways to store inputs. 1) useState 2) with useRef.

When we click on Signin button it tries to submit the form, which causes the page reload. To avoid this use e.preventDefault() at click handler.

Since I know how useRef works I wont be noting it.

useRef is used to reference a element in the dom . (Many other usecases he didn't tell , I know about it after working in KB)

https://stackoverflow.com/questions/76086163/what-is-better-usestate-or-useref-when-handling-multiple-form-inputs-in-react 
Check this.



======It's time to create Authentication===========

For Authentication we will use Firebase.

First install firebase. npm install firebase.

Then go to firebase console login and create your projejct.
Also get the config for the firebase.
After that enable authentication methods in your project.

Now come to your terminal and do firebase login.
Then firebase int.

Select the Configure files for firebase hosting option

Selectt use existing project and select your project

Give public directory as build.
 Configure as a single-page app (rewrite all urls to 
/index.html) - No

Set up automatic builds and deploys with GitHub? No 

To npm run build

And do firebase deploy.


=====Sign Up our first user============

docs => auth => web => manage-users

Always use Modular API, not namespace api.

Instead of creating auth everytime we will create it at a central place.



    // useEffect(() => {
    //     onAuthStateChanged(auth, (user) => {
    //         if (user){
    //             const {uid, email, displayName, photoURL} = user;
    //             dispatch(addUser({
    //                 uid : uid,
    //                 email : email,
    //                 displayName : displayName,
    //                 photoURL : photoURL
    //             }))
    //         }else{
    //             dispatch(removeUser());
    //         }
    //     })
    // }, [])

    Moved from bodyjs to headerjs. Since header is present everywhere. Now everytime header will load it will check the auth and based on that it will navigate.




======================USING TMDB AND CREATING OUR BROWSE COMPONENT =================================

StrictMode : React does extra rendering of your component if app is wrapped in strict mode. Hence we will see our api gets called two times.

Lets put our movie data in our redux store.

- Inside jsx always use camel-casing. (Context - iframe video)