To install Tailwind,

- Create React App
- Configured Tailwind
- Header
- Login Form
- Sign Up Form
- Form Validation
- useRef Hook
- Firebase Setup
- Deploying our app to production
- Create Signup User in Firebase.
- Implement sign in user api
- Create redux with userSlice
- Implemented Sign Out
- Update Profile
- Bugfix  : Signup user displayName and profile picture Update
- Bugfix : IF user is not logged in redirect /browse to login page and vice versa.
- Unsubscribed to the onAuthStateChanged callback.
- Add Hardcoded values to the constants files.
- Register for tmdb and create an app and get access token
- Get Data from tmdb now playing movie list api.
- Custom hook for now playing MovieList
- create movieSlice
- Update store with movies Data
- Planning for MainContainers And Secondary MainContainer
- Update store with trailer video data
- Embedded the youtube video and make it autoplay and mute
- Tailwind classes to make, maincontainer look awesome.
- Build Secondary Container
- Build Movie list
- Build Movie Card
- TMDB Image CDN Url
- Made the browse page with tailwind css
- Create usePopularMovies custom hook
- GPT Search page
- GPT Search Bar
- Multilingual Feature in our App
- Integrete GPT APIs.
- Get Gemini api key
- Fetched gpt movie suggestions from tmdb
- create gpt slice and added data over there
- Memoization 
- Adding .env file to gitignore
- Made our site responsive.



====================================
- Simulated a config that backend sends telling the features for the app in appjs. -- Done
- Add a decent Background => Done
- Fix the bug where if you change the language and go back to browse and again come back to gpt search then it retains the last selected language in the search bar but shows english in the dropdown.
- Find a way in scss to write a variable css, that is block of multiple css and can be used in a class with one line.
- On Clicks like Signout add a loader on a screen. A red orb loader could look beautiful. 
- On user gettting offline show a toast that user is offline. -- Done
- Create A searched movie card - Done 
- Create shimmer ui for that movie card. 
- Create a loader for that Movie sugeestions api call.(ORB WOULD BE TO MUCH COOL)
- Now you just save poster path and name and some important details in  redux that it.
- Try to implement a feature if user has selected hindi then show movie names in hindi.


====================================

# Features
- Login/Sign up
    - Login/Signup for Form
    - Rediect to browser page 
- Browse (after authentication)
    - Header    
    - Main Movie
        - Trailer in Background
        - Title & Description
        - Movie Suggestion
            - MovieList * N

- Netflix GPT
    - Search Bar
    - Movie Suggestions







======================LOGIN.JS======================

There are two ways to store inputs. 1) useState 2) with useRef.

When we click on Signin button it tries to submit the form, which causes the page reload. To avoid this use e.preventDefault() at click handler.

Since I know how useRef works I wont be noting it.

useRef is used to reference a element in the dom . (Many other usecases he didn't tell , I know about it after working in KB)

https://stackoverflow.com/questions/76086163/what-is-better-usestate-or-useref-when-handling-multiple-form-inputs-in-react 
Check this.



======It's time to create Authentication===========

For Authentication we will use Firebase.

First install firebase. npm install firebase.

Then go to firebase console login and create your projejct.
Also get the config for the firebase.
After that enable authentication methods in your project.

Now come to your terminal and do firebase login.
Then firebase int.

Select the Configure files for firebase hosting option

Selectt use existing project and select your project

Give public directory as build.
 Configure as a single-page app (rewrite all urls to 
/index.html) - No

Set up automatic builds and deploys with GitHub? No 

To npm run build

And do firebase deploy.


=====Sign Up our first user============

docs => auth => web => manage-users

Always use Modular API, not namespace api.

Instead of creating auth everytime we will create it at a central place.



    // useEffect(() => {
    //     onAuthStateChanged(auth, (user) => {
    //         if (user){
    //             const {uid, email, displayName, photoURL} = user;
    //             dispatch(addUser({
    //                 uid : uid,
    //                 email : email,
    //                 displayName : displayName,
    //                 photoURL : photoURL
    //             }))
    //         }else{
    //             dispatch(removeUser());
    //         }
    //     })
    // }, [])

    Moved from bodyjs to headerjs. Since header is present everywhere. Now everytime header will load it will check the auth and based on that it will navigate.




======================USING TMDB AND CREATING OUR BROWSE COMPONENT =================================

StrictMode : React does extra rendering of your component if app is wrapped in strict mode. Hence we will see our api gets called two times.

Lets put our movie data in our redux store.

- Inside jsx always use camel-casing. (Context - iframe video)